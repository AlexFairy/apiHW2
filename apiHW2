from flask import Flask, jsonify, request 
from flask_marshmallow import Marshmallow
import mysql.connector
from mysql.connector import Error
from marshmallow import Schema, fields, ValidationError
from password import my_password

app = Flask(__name__)
ma = Marshmallow(app)

def get_db_connection():
  db_name = "exercise_mySQL"
  user = "root"
  password = my_password
  host = "localhost"

  try:
    conn = mysql.connector.connect(
      database=db_name,
      user=user,
      password=password,
      host=host
    )
    print("Connected to MySQL database successful")
    return conn
  
  except Error as e:
    print(f"Error: {e}")
    return None
  
class MembersSchema(ma.Schema):
  id = fields.Int(dump_only=True)
  name = fields.Str(required=True)
  age = fields.Int(required=True)

class WorkoutSessionsSchema(ma.Schema):
  session_id = fields.Int(dump_only=True)
  member_id = fields.Int(required=True)
  session_date = fields.Date(required=True)
  session_time = fields.Str(required=True)
  activity = fields.Str(required=True)

member_schema = MembersSchema()
members_schemma = MembersSchema(many=True)
workout_session_schema = WorkoutSessionsSchema()
workout_sessions_schema = WorkoutSessionsSchema(many=True)

@app.route('/members', methods=['POST'])
def add_member():
  try:
    member = member_schema.load(request.json)
  except ValidationError as err:
    return jsonify(err.messages), 400
  
  conn = get_db_connection()
  if conn is None:
    return jsonify({"error": "Database connection failed"}),  500
  
  try: 
    cursor = conn.cursor() 
    query = "INSERT INTO Members (name, age) VALUES (%s, %s)"
    cursor.execute(query, (member['name'], member['age']))
    conn.commit()
    return jsonify({"message": "Member added successfully"}), 201

  except Error as e:
    return jsonify({"error": str(e)}), 500
  
  finally:
    cursor.close()
    conn.close()

@app.route('/members/<int:id>', methods=['GET'])
def get_member(id):
  conn = get_db_connection()
  if conn is None:
    return jsonify({"error": "Database connection failed"}),  500
  
  try:
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT a.id, a.name, a.age, b.session_time, b.activity FROM WorkoutSessions b, Members a WHERE b.member_id = a.id", (id,))
    membersQ = cursor.fetchone()
    conn.commit()
    
    return member_schema.jsonify(membersQ)

  except Error as e:
    return jsonify({"error": str(e)}), 500
  
  finally:
    cursor.close()
    conn.close()

@app.route("/members/<int:id>", methods=["PUT"]) 
def update_member(id):
  try:
    member_data = member_schema.load(request.json)
  except ValidationError as e:
    print(f"Error: {e}")
    return jsonify(e.messages), 400
  
  try:
    conn = get_db_connection()
    if conn is None:
      return jsonify({"error": "Database connection failed"}), 500 
    cursor = conn.cursor() 

    updated_member = (member_data['name'], member_data['age'], id)
    
    query = 'UPDATE Members SET name = %s, age = %s WHERE id = %s'

    cursor.execute(query, updated_member)
    conn.commit()

    return jsonify({"message": "Updated the member successfully"}), 201

  except Error as e:
    print(f"Error: {e}") 
    return jsonify({"error": "Internal Service Error"}), 500
  
  finally:
    if conn and conn.is_connected():
      cursor.close()
      conn.close()

@app.route("/members/<int:id>", methods=["DELETE"])
def delete_member(id):
  
  try:
    conn = get_db_connection()
    if conn is None:
      return jsonify({"error": "Database connection failed"}), 500
    cursor = conn.cursor()
    
    member_to_remove = (id,)

    cursor.execute("SELECT * FROM Members where id = %s", member_to_remove)
    customer = cursor.fetchone()
    if not customer:
      return jsonify({"error": "Member not found"}), 404
    
    query = "DELETE FROM Members WHERE id = %s"
    cursor.execute(query, member_to_remove)
    conn.commit()
    
    return jsonify({"message": "Member removed successfully"}), 200

  except Error as e:
    print(f"Error: {e}") 
    return jsonify({"error": "Internal Service Error"}), 500
  
  finally:
    if conn and conn.is_connected():
      cursor.close()
      conn.close()

@app.route('/workoutsessions', methods=['POST'])
def add_schedules():
  try:
    schedules = workout_session_schema.load(request.json)
  except ValidationError as err:
    return jsonify(err.messages), 400
  
  conn = get_db_connection()
  if conn is None:
    return jsonify({"error": "Database connection failed"}),  500
  
  try: 
    cursor = conn.cursor() 
    query = "INSERT INTO WorkoutSessions (member_id, session_date, session_time, activity) VALUES (%s, %s, %s, %s)"
    cursor.execute(query, (schedules['member_id'], schedules['session_date'], schedules['session_time'], schedules['activity']))
    conn.commit()
    return jsonify({"message": "Workout Schedule added successfully"}), 201

  except Error as e:
    return jsonify({"error": str(e)}), 500
  
  finally:
    cursor.close()
    conn.close()

@app.route("/workoutsessions/<int:session_id>", methods=["PUT"]) 
def update_workout_sessions(session_id):
  try:
    workout_data = workout_session_schema.load(request.json)
  except ValidationError as e:
    print(f"Error: {e}")
    return jsonify(e.messages), 400
  
  try:
    conn = get_db_connection()
    if conn is None:
      return jsonify({"error": "Database connection failed"}), 500 
    cursor = conn.cursor() 

    updated_workout = (workout_data['session_date'], workout_data['session_time'], workout_data['activity'], session_id)
    
    query = 'UPDATE WorkoutSession SET session_date = %s, session_time = %s, activity = %s WHERE session_id = %s'

    cursor.execute(query, updated_workout)
    conn.commit()

    return jsonify({"message": "Updated the member successfully"}), 201

  except Error as e:
    print(f"Error: {e}") 
    return jsonify({"error": "Internal Service Error"}), 500
  
  finally:
    if conn and conn.is_connected():
      cursor.close()
      conn.close()

@app.route('/workoutsessions', methods=['GET'])
def view_workout():
  conn = get_db_connection()
  if not conn:
    return jsonify({"error": "Database connection failed"}), 500
  
  try:
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT member_id FROM WorkoutSessions")
    session_id = [session_id[0] for session_id in cursor.fetchall()]
    return jsonify(session_id)

  except Error as e:
    return jsonify({"error": str(e)}), 500
  
  finally:
    cursor.close()
    conn.close()

if __name__ == '__main__':
  app.run(debug=True)
